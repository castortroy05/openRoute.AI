# Generated by Django 4.2.5 on 2023-09-25 21:33

import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "dietary_preference",
                    models.CharField(
                        choices=[
                            ("V", "Vegetarian"),
                            ("VG", "Vegan"),
                            ("GF", "Gluten-Free"),
                            ("N", "None"),
                            ("K", "Kosher"),
                            ("H", "Halal"),
                            ("B", "Bland"),
                            ("P", "Pescatarian"),
                            ("D", "Dairy-Free"),
                            ("O", "Other"),
                        ],
                        default="N",
                        max_length=2,
                        verbose_name="Dietary Preference",
                    ),
                ),
                (
                    "accessibility_requirements",
                    models.TextField(
                        blank=True,
                        null=True,
                        validators=[django.core.validators.MinLengthValidator(1)],
                        verbose_name="Accessibility Requirements",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="customuser_groups",
                        related_query_name="customuser",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="customuser_user_permissions",
                        related_query_name="customuser",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Itinerary",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name="Place",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("address", models.CharField(max_length=255)),
                (
                    "latitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                -90,
                                message="Latitude must be between -90 and 90 degrees.",
                            ),
                            django.core.validators.MaxValueValidator(
                                90,
                                message="Latitude must be between -90 and 90 degrees.",
                            ),
                        ]
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        validators=[
                            django.core.validators.MinValueValidator(
                                -180,
                                message="Longitude must be between -180 and 180 degrees.",
                            ),
                            django.core.validators.MaxValueValidator(
                                180,
                                message="Longitude must be between -180 and 180 degrees.",
                            ),
                        ]
                    ),
                ),
                (
                    "image",
                    models.ImageField(blank=True, null=True, upload_to="places/"),
                ),
                (
                    "place_type",
                    models.CharField(
                        choices=[
                            ("R", "Restaurant"),
                            ("H", "Hotel"),
                            ("A", "Attraction"),
                            ("S", "Shopping"),
                            ("T", "Theatre"),
                            ("C", "Cinema"),
                            ("Ba", "Bar"),
                            ("C", "Club"),
                            ("G", "Gallery"),
                            ("L", "Library"),
                            ("Z", "Zoo"),
                            ("AQ", "Aquarium"),
                            ("Be", "Beach"),
                            ("TP", "Theme Park"),
                            ("M", "Museum"),
                            ("P", "Park"),
                            ("O", "Other"),
                        ],
                        default="O",
                        max_length=2,
                    ),
                ),
                (
                    "cuisine_type",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("accessibility_features", models.TextField(blank=True, null=True)),
                ("visit_time", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="openRoute_app.customuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Optimization",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("minimize_travel_time", models.BooleanField(default=True)),
                ("minimize_distance", models.BooleanField(default=False)),
                ("consider_dietary_preferences", models.BooleanField(default=False)),
                (
                    "consider_accessibility_requirements",
                    models.BooleanField(default=False),
                ),
                ("avoid_tolls", models.BooleanField(default=False)),
                ("avoid_highways", models.BooleanField(default=False)),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="openRoute_app.customuser",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ItineraryPlace",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("order", models.PositiveIntegerField()),
                ("estimated_arrival", models.DateTimeField(blank=True, null=True)),
                ("estimated_departure", models.DateTimeField(blank=True, null=True)),
                (
                    "itinerary",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="openRoute_app.itinerary",
                    ),
                ),
                (
                    "place",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="openRoute_app.place",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="itinerary",
            name="lunch_stop",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="+",
                to="openRoute_app.place",
            ),
        ),
        migrations.AddField(
            model_name="itinerary",
            name="user",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="openRoute_app.customuser",
            ),
        ),
    ]
